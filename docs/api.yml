openapi: 3.0.3
info:
  title: Library API
  version: 1.0.1
  description: STD22050
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string

        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateInterval
          description: Filter books by release date interval
          required: false
          schema:
            type: object
            properties:
              start:
                type: string
                format: date
              end:
                type: string
                format: date
        - in: query
          name : releaseDateTo
          description: filter return books released on or bedore the specified date
          required: false 
          schema:
            type: string
            format : date
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
                  
    put:
      summary: Create or update a list of books
      operationId: crupdateBook
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/CrupdateBook"
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"

  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
  /authors:
    get:
      summary: Get all authors
      description: Retrieve a list of all authors.
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: filter return authors by name
          required:  false
          schema:
            type: string
      responses:
        200:
          description: The list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"

    put:
      summary: Create or update authors
      description: Create or update a list of authors.
      operationId: createOrUpdateAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Author"
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"

    delete:
      summary: Delete all authors
      description: Delete all authors in the system.
      operationId: deleteAuthors
      parameters:
        - in: query
          name : authorId
          description: ID of the author to delete
          required: true
          schema :
           type: string
      responses:
        204:
          description: Authors successfully deleted

components:
  schemas:
   
    Book:
      allOf:
        - $ref: "#/components/schemas/crupdateBook"
      properties:
        author:
          $ref: "#/components/schemas/Author"


    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        sex:
          type: string
          enum:
            - M
            - F

    crupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        author:
          $ref: "#/components/schemas/Author"
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date

      

    # dispatch authors from, creating or updating book
    # oas-TD2 STD22050(nouvelle branche)
    # git branch -m "nom de ma nouvelle branche"
    #TD2-A : faire le mmeme schema et le topic lassa misy get put delete ( crée des endpoint pour ce faire : books/authors)
    #TD2-B : mettre une parametre (filtre de paginations am resaka topics si books)
    #TD2-C : associée topics et authors ( endpoint : authorstopics, manana get avec toute les caractéristiques de authors et topics apart)
